'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _invariant = require('invariant');

var _invariant2 = _interopRequireDefault(_invariant);

var _Actions = require('./Actions');

var _ExecutionEnvironment = require('./ExecutionEnvironment');

var _DOMUtils = require('./DOMUtils');

var _createDOMHistory = require('./createDOMHistory');

var _createDOMHistory2 = _interopRequireDefault(_createDOMHistory);

var _createLocation = require('./createLocation');

var _createLocation2 = _interopRequireDefault(_createLocation);

function getCurrentLocation(historyState) {
  historyState = historyState || window.history.state || {};

  var _historyState = historyState;
  var key = _historyState.key;

  var state = key && _DOMUtils.readState(key);
  var path = _DOMUtils.getWindowPath();

  return _createLocation2['default'](path, state, undefined, key);
}

function startPopStateListener(_ref) {
  var transitionTo = _ref.transitionTo;

  function popStateListener(event) {
    if (event.state === undefined) return; // Ignore extraneous popstate events in WebKit.

    transitionTo(getCurrentLocation(event.state));
  }

  _DOMUtils.addEventListener(window, 'popstate', popStateListener);

  return function () {
    _DOMUtils.removeEventListener(window, 'popstate', popStateListener);
  };
}

/**
 * Creates and returns a history object that uses HTML5's history API
 * (pushState, replaceState, and the popstate event) to manage history.
 * This is the recommended method of managing history in browsers because
 * it provides the cleanest URLs.
 *
 * Note: In browsers that do not support the HTML5 history API full
 * page reloads will be used to preserve URLs.
 */
function createBrowserHistory(options) {
  _invariant2['default'](_ExecutionEnvironment.canUseDOM, 'Browser history needs a DOM');

  var isSupported = _DOMUtils.supportsHistory();

  function finishTransition(location) {
    var key = location.key;
    var pathname = location.pathname;
    var search = location.search;

    var path = pathname + search;
    var historyState = {
      key: key
    };

    switch (location.action) {
      case _Actions.PUSH:
        _DOMUtils.saveState(location.key, location.state);

        if (isSupported) {
          window.history.pushState(historyState, null, path);
        } else {
          window.location.href = path; // Use page reload to preserve the URL.
        }
        break;
      case _Actions.REPLACE:
        _DOMUtils.saveState(location.key, location.state);

        if (isSupported) {
          window.history.replaceState(historyState, null, path);
        } else {
          window.location.replace(path); // Use page reload to preserve the URL.
        }
        break;
    }
  }

  function cancelTransition(location) {
    if (location.action === _Actions.POP) {
      var n = 0; // TODO: Figure out what n will put the URL back.
      _DOMUtils.go(n);
    }
  }

  var history = _createDOMHistory2['default'](_extends({}, options, {
    getCurrentLocation: getCurrentLocation,
    finishTransition: finishTransition,
    cancelTransition: cancelTransition
  }));

  var listenerCount = 0,
      stopPopStateListener;

  function listen(listener) {
    if (++listenerCount === 1) stopPopStateListener = startPopStateListener(history);

    var unlisten = history.listen(listener);

    return function () {
      unlisten();

      if (--listenerCount === 0) stopPopStateListener();
    };
  }

  return _extends({}, history, {
    listen: listen
  });
}

exports['default'] = createBrowserHistory;
module.exports = exports['default'];